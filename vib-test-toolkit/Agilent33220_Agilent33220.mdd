<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.43</FileVersion>
   <DriverName>Agilent33220.Agilent33220</DriverName>
   <DriverType>MATLAB IVI-COM</DriverType>
   <InstrumentType>IAgilent33220</InstrumentType>
   <InstrumentManufacturer>Manufacturer</InstrumentManufacturer>
   <InstrumentModel>Model</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
ictver = ver('instrument');
splittedVer = regexp (ictver.Version , '\.', 'split');
if (~isempty(splittedVer) &amp;&amp; (str2num(char(splittedVer(1))) &lt; 2 || (str2num(char(splittedVer(1))) == 2 &amp;&amp; str2num(char(splittedVer(2))) &lt;= 6)))
   error('instrument:icdevice:newerdriver','This driver requires Instrument Control ToolBox version 2.7.0 (R2008B) or later');
end
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% NOTE: This code is required to support driver interfaces that are collections.
%       Deleting or altering this code may prevent device objects using this
%       driver from operating correctly.

comobj = get(obj, 'Interface');

warning off backtrace
warning on backtrace
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Initialized</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Interface;
	propertyValue = comobj.Initialized;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Initialized is True between a successful call to the Initialize method and a successful call to the Close method, and False at all other times.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Close</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Closes the I/O session to the instrument.  Driver methods and properties that access the instrument are not accessible after Close is called.</Description>
            </Method>
            <Method>
               <Name>Initialize</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initialize(obj, ResourceName, IdQuery, Reset, OptionString)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Initialize(ResourceName, logical(IdQuery), logical(Reset), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>am</Name>
         <Description>Agilent 33220 AM interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Depth</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.Depth;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	comobj.Depth = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The internal modulation depth (or percent modulation) in percent.</Description>
            </Property>
            <Property>
               <Name>DepthMax</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.DepthMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum internal modulation depth.</Description>
            </Property>
            <Property>
               <Name>DepthMin</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.DepthMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum internal modulation depth.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.InternalFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	comobj.InternalFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMax</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.InternalFrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMin</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.InternalFrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFunction</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.InternalFunction;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	comobj.InternalFunction = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220AMInternalFunctionSinusoid" Value="Agilent33220AMInternalFunctionSinusoid"/>
                     <Enum Name="Agilent33220AMInternalFunctionSquare" Value="Agilent33220AMInternalFunctionSquare"/>
                     <Enum Name="Agilent33220AMInternalFunctionRamp" Value="Agilent33220AMInternalFunctionRamp"/>
                     <Enum Name="Agilent33220AMInternalFunctionNegativeRamp" Value="Agilent33220AMInternalFunctionNegativeRamp"/>
                     <Enum Name="Agilent33220AMInternalFunctionTriangle" Value="Agilent33220AMInternalFunctionTriangle"/>
                     <Enum Name="Agilent33220AMInternalFunctionNoise" Value="Agilent33220AMInternalFunctionNoise"/>
                     <Enum Name="Agilent33220AMInternalFunctionUser" Value="Agilent33220AMInternalFunctionUser"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220AMInternalFunctionSinusoid</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The shape of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220AMSourceInternal" Value="Agilent33220AMSourceInternal"/>
                     <Enum Name="Agilent33220AMSourceExternal" Value="Agilent33220AMSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220AMSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The source of the modulating signal. The function generator will accept an internal or external modulation source.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.AM;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable AM. To avoid multiple waveform changes, you can enable AM after you have set up the other modulation parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetDepthMax</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDepthMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDepthMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the internal modulation depth to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetDepthMin</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDepthMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDepthMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the internal modulation depth to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMax</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMin</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.AM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>apply</Name>
         <Description>Agilent 33220 apply interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Apply1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Query</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pFunction, pFrequency, pAmplitude, pOffset] = Query(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
[pFunction, pFrequency, pAmplitude, pOffset] = comobj.Query(0, 0, 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Query the function generator s current configuration.</Description>
            </Method>
            <Method>
               <Name>SetDC</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDC(obj, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetDC(double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output a dc voltage with the level specified by the offset parameter.  The dc voltage is output as soon as the command is executed.</Description>
            </Method>
            <Method>
               <Name>SetNoise</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetNoise(obj, Amplitude, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetNoise(double(Amplitude), double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output Gaussian noise with the specified amplitude and dc offset.  The waveform is output as soon as the command is executed.</Description>
            </Method>
            <Method>
               <Name>SetPulse</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPulse(obj, Frequency, Amplitude, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetPulse(double(Frequency), double(Amplitude), double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output a pulse wave with the specified frequency, amplitude, and dc offset. The waveform is output as soon as the command is executed.</Description>
            </Method>
            <Method>
               <Name>SetRamp</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRamp(obj, Frequency, Amplitude, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetRamp(double(Frequency), double(Amplitude), double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output a ramp wave with the specified frequency, amplitude, and dc offset. This command overrides the current symmetry setting and automatically selects 100%. The waveform is output as soon as the command is executed.</Description>
            </Method>
            <Method>
               <Name>SetSinusoid</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSinusoid(obj, Frequency, Amplitude, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetSinusoid(double(Frequency), double(Amplitude), double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output a sine wave with the specified frequency, amplitude, and dc offset. The waveform is output as soon as the command is executed.</Description>
            </Method>
            <Method>
               <Name>SetSquare</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSquare(obj, Frequency, Amplitude, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetSquare(double(Frequency), double(Amplitude), double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output a square wave with the specified frequency, amplitude, and dc offset. This command overrides the current duty cycle setting and automatically selects 50%. The waveform is output as soon as the command is executed.</Description>
            </Method>
            <Method>
               <Name>SetUser</Name>
               <Location>apply</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetUser(obj, Frequency, Amplitude, Offset)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Apply;
feature('COM_SafeArraySingleDim',1);
comobj.SetUser(double(Frequency), double(Amplitude), double(Offset));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Output the arbitrary waveform currently selected. The waveform is output using the specified frequency, amplitude, and dc offset. The waveform is output as soon as the command is executed.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>arbitrarywaveform</Name>
         <Description>Agilent 33220 arbitrary waveform interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>NonVolatileFree</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	propertyValue = comobj.NonVolatileFree;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the number of non-volatile memory slots available to store user-defined waveforms. Returns the number of memory slots available to store user-defined waveforms. Returns 0 (memory is full), 1, 2, 3, or 4.</Description>
            </Property>
            <Property>
               <Name>NonVolatileMax</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	propertyValue = comobj.NonVolatileMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the maximum number of non-volatile memory slots to store user-defined waveforms.  Returns 4.</Description>
            </Property>
            <Property>
               <Name>User</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	propertyValue = comobj.User;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	comobj.User = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Select one of the five built-in arbitrary waveforms (EXP_RISE, EXP_FALL, NEG_RAMP, SINC, CARDIAC), one of four user-defined waveforms, or the waveform currently downloaded to volatile memory.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>CopyData</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function CopyData(obj, Name)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.CopyData(Name);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Copy the waveform from volatile memory to the specified name in non-volatile memory. The source for the copy is always volatile. You cannot copy from any other source and you cannot copy to volatile.</Description>
            </Method>
            <Method>
               <Name>Delete</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Delete(obj, Name)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.Delete(Name);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Delete the specified arbitrary waveform from memory. You can delete the waveform in volatile memory or any of the four user-defined waveforms in non-volatile memory.</Description>
            </Method>
            <Method>
               <Name>DeleteAll</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DeleteAll(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.DeleteAll();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Delete all user-defined arbitrary waveforms from memory. This command deletes the waveform in volatile memory and all user-defined waveforms in non-volatile memory. The five built-in waveforms in non-volatile memory are not deleted.</Description>
            </Method>
            <Method>
               <Name>QueryCatalog</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = QueryCatalog(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
[pVal] = comobj.QueryCatalog(['';'']);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>List the names of all waveforms currently available for selection. Returns the names of the five built-in waveforms, VOLATILE if one is currently downloaded to volatile memory, and all user-defined waveforms downloaded to non-volatile memory.</Description>
            </Method>
            <Method>
               <Name>QueryNonVolatileCatalog</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = QueryNonVolatileCatalog(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
[pVal] = comobj.QueryNonVolatileCatalog(['';'']);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>List the names of all user-defined arbitrary waveforms downloaded to non-volatile memory. Returns the names of up to four waveforms.</Description>
            </Method>
            <Method>
               <Name>SetData</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetData(obj, Val)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetData(Val);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Download floating-point values from -1 to +1 into volatile memory. You can download from 1 to 65,536 (64K) points per waveform.</Description>
            </Method>
            <Method>
               <Name>SetDataDAC</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDataDAC(obj, Val)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetDataDAC(int16(Val));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Download binary or decimal integer values from -2047 to +2047 into volatile memory. You can download from 1 to 65,536 (64K) points per waveform.</Description>
            </Method>
            <Method>
               <Name>SetUser</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetUser(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ArbitraryWaveform;
feature('COM_SafeArraySingleDim',1);
comobj.SetUser();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Select the arbitrary waveform function and output the current arbitrary waveform.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>arbitrarywaveformattribute</Name>
         <Description>Agilent 33220 arbitrary waveform attribute interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitraryWaveformAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Average</Name>
               <Location>arbitrarywaveformattribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	comobj = comobj.Attribute;
	propertyValue = comobj.Average;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the arithmetic average of all data points for the selected arbitrary waveform (-1 &lt;= average &lt;= +1).</Description>
            </Property>
            <Property>
               <Name>CrestFactor</Name>
               <Location>arbitrarywaveformattribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	comobj = comobj.Attribute;
	propertyValue = comobj.CrestFactor;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the crest factor of all data points for the selected arbitrary waveform. Crest factor is the ratio of the peak value to the RMS value of the waveform.</Description>
            </Property>
            <Property>
               <Name>NumberOfPoints</Name>
               <Location>arbitrarywaveformattribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	comobj = comobj.Attribute;
	propertyValue = comobj.NumberOfPoints;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the number of points in the selected arbitrary waveform. Returns a value from 1 to 65,536 points.</Description>
            </Property>
            <Property>
               <Name>PeakToPeak</Name>
               <Location>arbitrarywaveformattribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ArbitraryWaveform;
	comobj = comobj.Attribute;
	propertyValue = comobj.PeakToPeak;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the peak-to-peak value of all data points for the selected arbitrary waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>burst</Name>
         <Description>Agilent 33220 burst interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Burst1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>GatePolarity</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.GatePolarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.GatePolarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220BurstGatePolarityNormal" Value="Agilent33220BurstGatePolarityNormal"/>
                     <Enum Name="Agilent33220BurstGatePolarityInverted" Value="Agilent33220BurstGatePolarityInverted"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220BurstGatePolarityNormal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select whether the function generator uses true-high or true-low logic levels.</Description>
            </Property>
            <Property>
               <Name>InternalPeriod</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.InternalPeriod;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.InternalPeriod = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The burst period for internally-triggered bursts. The burst period defines time from the start of one burst to the start of the next burst.</Description>
            </Property>
            <Property>
               <Name>InternalPeriodMax</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.InternalPeriodMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum burst period for internally-triggered bursts.</Description>
            </Property>
            <Property>
               <Name>InternalPeriodMin</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.InternalPeriodMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum burst period for internally-triggered bursts.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.Mode;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.Mode = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220BurstModeTriggered" Value="Agilent33220BurstModeTriggered"/>
                     <Enum Name="Agilent33220BurstModeGated" Value="Agilent33220BurstModeGated"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220BurstModeTriggered</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The burst mode.</Description>
            </Property>
            <Property>
               <Name>NumberOfCycles</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.NumberOfCycles;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.NumberOfCycles = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of cycles to be output per burst (triggered burst mode only).</Description>
            </Property>
            <Property>
               <Name>NumberOfCyclesMax</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.NumberOfCyclesMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum number of cycles to be output per burst (triggered burst mode only).</Description>
            </Property>
            <Property>
               <Name>NumberOfCyclesMin</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.NumberOfCyclesMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum number of cycles to be output per burst (triggered burst mode only).</Description>
            </Property>
            <Property>
               <Name>Phase</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.Phase;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.Phase = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The starting phase for the burst in degrees or radians as specified by the angle units.</Description>
            </Property>
            <Property>
               <Name>PhaseMax</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.PhaseMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum starting phase for the burst.</Description>
            </Property>
            <Property>
               <Name>PhaseMin</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.PhaseMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum starting phase for the burst.</Description>
            </Property>
            <Property>
               <Name>PhaseUnits</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.PhaseUnits;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.PhaseUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220PhaseUnitDegree" Value="Agilent33220PhaseUnitDegree"/>
                     <Enum Name="Agilent33220PhaseUnitRadian" Value="Agilent33220PhaseUnitRadian"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220PhaseUnitDegree</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select degrees or radians to set the starting phase for the burst.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Burst;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the burst mode. To avoid multiple waveform changes, you can enable the burst mode after you have set up the other burst parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetInternalPeriodMax</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalPeriodMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalPeriodMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the burst period for internally-triggered bursts to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetInternalPeriodMin</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalPeriodMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalPeriodMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the burst period for internally-triggered bursts to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetNumberOfCyclesInfinity</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetNumberOfCyclesInfinity(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetNumberOfCyclesInfinity();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the number of cycles to be output per burst (triggered burst mode only) to infinity.</Description>
            </Method>
            <Method>
               <Name>SetNumberOfCyclesMax</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetNumberOfCyclesMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetNumberOfCyclesMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the number of cycles to be output per burst (triggered burst mode only) to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetNumberOfCyclesMin</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetNumberOfCyclesMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetNumberOfCyclesMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the number of cycles to be output per burst (triggered burst mode only) to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetPhaseMax</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPhaseMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetPhaseMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the starting phase for the burst to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetPhaseMin</Name>
               <Location>burst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPhaseMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Burst;
feature('COM_SafeArraySingleDim',1);
comobj.SetPhaseMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the starting phase for the burst to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description>Agilent 33220 calibration interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the instrument to determine the number of times it has been calibrated.</Description>
            </Property>
            <Property>
               <Name>SecureState</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.SecureState;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Unsecure or secure the instrument for calibration.</Description>
            </Property>
            <Property>
               <Name>Setup</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Setup;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	comobj.Setup = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Configure the function generator s internal state for each of the calibration steps to be performed.</Description>
            </Property>
            <Property>
               <Name>String</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.String;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	comobj.String = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Store a message in non-volatile calibration memory. Storing a message will overwrite any message previously stored in memory.</Description>
            </Property>
            <Property>
               <Name>Value</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	propertyValue = comobj.Value;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Calibration;
	comobj.Value = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specify the value of the known calibration signal as outlined in the calibration procedures in the Agilent 33220A Service Guide.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Calibrate</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = Calibrate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
[pVal] = comobj.Calibrate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Perform a calibration of the instrument using the specified calibration value.</Description>
            </Method>
            <Method>
               <Name>SetSecureState</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSecureState(obj, Val, Code)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Calibration;
feature('COM_SafeArraySingleDim',1);
comobj.SetSecureState(logical(Val), Code);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Unsecure or secure the instrument for calibration. The calibration code may contain up to 12 characters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>display</Name>
         <Description>Agilent 33220 display interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the function generator front-panel display. When it is disabled, the front-panel display is blanked (however, the bulb used to backlight the display remains enabled).</Description>
            </Property>
            <Property>
               <Name>Text</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.Text;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.Text = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The text message on the function generator s front-panel display.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>TextClear</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function TextClear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display;
feature('COM_SafeArraySingleDim',1);
comobj.TextClear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear the text message currently shown on the function generator s front-panel display.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>driveroperation</Name>
         <Description>IVI Driver operation interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DriverOperation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Cache;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Cache = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver caches instrument settings to avoid unnecessary I/O to the instrument.  The actual settings that are cached are driver-specific.</Description>
            </Property>
            <Property>
               <Name>DriverSetup</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.DriverSetup;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>InterchangeCheck</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.InterchangeCheck;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.InterchangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error.</Description>
            </Property>
            <Property>
               <Name>IoResourceDescriptor</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.IoResourceDescriptor;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>LogicalName</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.LogicalName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Logical Name identifies a driver session in the Configuration Store.  If Logical Name is not empty, the driver was initialized from information in the driver session.  If it is empty, the driver was initialized without using the Configuration Store.</Description>
            </Property>
            <Property>
               <Name>QueryInstrumentStatus</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.QueryInstrumentStatus;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.QueryInstrumentStatus = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument.</Description>
            </Property>
            <Property>
               <Name>RangeCheck</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RangeCheck;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver validates property and parameter values to avoid invalid commands to the instrument.  The extent of the validation is driver-specific.</Description>
            </Property>
            <Property>
               <Name>RecordCoercions</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RecordCoercions;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RecordCoercions = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error.</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Simulate;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Simulate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearInterchangeWarnings</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearInterchangeWarnings(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ClearInterchangeWarnings();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the list of interchangeability warnings that the IVI specific driver maintains.</Description>
            </Method>
            <Method>
               <Name>GetNextCoercionRecord</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = GetNextCoercionRecord(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[CoercionRecord] = comobj.GetNextCoercionRecord();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>GetNextInterchangeWarning</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = GetNextInterchangeWarning(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[InterchangeWarning] = comobj.GetNextInterchangeWarning();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest warning from the interchange warning list.  Records are only added to the list if InterchangeCheck is True.</Description>
            </Method>
            <Method>
               <Name>InvalidateAllAttributes</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function InvalidateAllAttributes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.InvalidateAllAttributes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>ResetInterchangeCheck</Name>
               <Location>driveroperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetInterchangeCheck(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ResetInterchangeCheck();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the interchangeability checking algorithms of the driver so that methods and properties that executed prior to calling this function have no affect on whether future calls to the driver generate interchangeability warnings.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>fm</Name>
         <Description>Agilent 33220 FM interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Deviation</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.Deviation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	comobj.Deviation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The peak frequency deviation in hertz. This value represents the variation in frequency of the modulating waveform from the carrier frequency.</Description>
            </Property>
            <Property>
               <Name>DeviationMax</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.DeviationMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum peak frequency deviation.</Description>
            </Property>
            <Property>
               <Name>DeviationMin</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.DeviationMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum peak frequency deviation.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.InternalFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	comobj.InternalFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMax</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.InternalFrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMin</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.InternalFrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFunction</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.InternalFunction;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	comobj.InternalFunction = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220FMInternalFunctionSinusoid" Value="Agilent33220FMInternalFunctionSinusoid"/>
                     <Enum Name="Agilent33220FMInternalFunctionSquare" Value="Agilent33220FMInternalFunctionSquare"/>
                     <Enum Name="Agilent33220FMInternalFunctionRamp" Value="Agilent33220FMInternalFunctionRamp"/>
                     <Enum Name="Agilent33220FMInternalFunctionNegativeRamp" Value="Agilent33220FMInternalFunctionNegativeRamp"/>
                     <Enum Name="Agilent33220FMInternalFunctionTriangle" Value="Agilent33220FMInternalFunctionTriangle"/>
                     <Enum Name="Agilent33220FMInternalFunctionNoise" Value="Agilent33220FMInternalFunctionNoise"/>
                     <Enum Name="Agilent33220FMInternalFunctionUser" Value="Agilent33220FMInternalFunctionUser"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220FMInternalFunctionSinusoid</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The shape of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220FMSourceInternal" Value="Agilent33220FMSourceInternal"/>
                     <Enum Name="Agilent33220FMSourceExternal" Value="Agilent33220FMSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220FMSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The source of the modulating signal. The function generator will accept an internal or external modulation source.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FM;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable FM. To avoid multiple waveform changes, you can enable FM after you have set up the other modulation parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetDeviationMax</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the peak frequency deviation to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetDeviationMin</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the peak frequency deviation to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMax</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMin</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>fsk</Name>
         <Description>Agilent 33220 FSK interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FSK1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Frequency</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.Frequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The FSK alternate (or hop) frequency.</Description>
            </Property>
            <Property>
               <Name>FrequencyMax</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.FrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum FSK alternate (or hop) frequency.</Description>
            </Property>
            <Property>
               <Name>FrequencyMin</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.FrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum FSK alternate (or hop) frequency.</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.InternalRate;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	comobj.InternalRate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The rate at which the output frequency shifts between the carrier and hop frequency.</Description>
            </Property>
            <Property>
               <Name>InternalRateMax</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.InternalRateMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum rate at which the output frequency shifts between the carrier and hop frequency.</Description>
            </Property>
            <Property>
               <Name>InternalRateMin</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.InternalRateMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum rate at which the output frequency shifts between the carrier and hop frequency.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220FSKSourceInternal" Value="Agilent33220FSKSourceInternal"/>
                     <Enum Name="Agilent33220FSKSourceExternal" Value="Agilent33220FSKSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220FSKSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select an internal or external FSK source.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.FSK;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable FSK modulation. To avoid multiple waveform changes, you can enable FSK after you have set up the other modulation parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetFrequencyMax</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FSK;
feature('COM_SafeArraySingleDim',1);
comobj.SetFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the FSK alternate (or hop) frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetFrequencyMin</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FSK;
feature('COM_SafeArraySingleDim',1);
comobj.SetFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the FSK alternate (or hop) frequency to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetInternalRateMax</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalRateMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FSK;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalRateMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the rate at which the output frequency shifts between the carrier and hop frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetInternalRateMin</Name>
               <Location>fsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalRateMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.FSK;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalRateMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the rate at which the output frequency shifts between the carrier and hop frequency to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>identity</Name>
         <Description>IVI Driver driver identity interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Identity1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Description</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Description;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A brief description of the implementing component.  Description is limted to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>GroupCapabilities</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.GroupCapabilities;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string.</Description>
            </Property>
            <Property>
               <Name>Identifier</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Identifier;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The case-sensitive unique identifier of the implementing IVI-COM instrument driver.</Description>
            </Property>
            <Property>
               <Name>InstrumentFirmwareRevision</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentFirmwareRevision;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition.</Description>
            </Property>
            <Property>
               <Name>InstrumentManufacturer</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentManufacturer;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition. Manufacturer is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>InstrumentModel</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentModel;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>Revision</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Revision;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The revision of the implementing component.  Refer to IVI-3.2, Section 3.1.2.2, for a description of revision syntax and semantics.  Revision is limited to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>SpecificationMajorVersion</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMajorVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the major version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SpecificationMinorVersion</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMinorVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the minor version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SupportedInstrumentModels</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SupportedInstrumentModels;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of instrument models that the IVI specific driver can control.</Description>
            </Property>
            <Property>
               <Name>Vendor</Name>
               <Location>identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Vendor;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the vendor that supplies the implementing component.  Vendor is limited to 256 bytes.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>instrumentstatus</Name>
         <Description>Agilent 33220 status interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SerialPoll</Name>
               <Location>instrumentstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Status;
	propertyValue = comobj.SerialPoll;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Serial poll the instrument status byte.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>instrumentstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear event registers and error queue.</Description>
            </Method>
            <Method>
               <Name>ConfigureServiceRequest</Name>
               <Location>instrumentstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureServiceRequest(obj, Reason)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureServiceRequest(Reason);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configure instrument to issue an SRQ on events defined in SRQReasonEnum parameter.</Description>
            </Method>
            <Method>
               <Name>Preset</Name>
               <Location>instrumentstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Preset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Preset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Preset status system.</Description>
            </Method>
            <Method>
               <Name>Register</Name>
               <Location>instrumentstatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = Register(obj, Register, SubRegister, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Register(Register, SubRegister, varargin{:});
end
[pVal] = comobj.Register(Register, SubRegister);
</MCode>
               </Code>
               <Description>Status registers.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>output</Name>
         <Description>Agilent 33220 output interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Output1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Frequency</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.Frequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output frequency.</Description>
            </Property>
            <Property>
               <Name>FrequencyMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.FrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum output frequency.</Description>
            </Property>
            <Property>
               <Name>FrequencyMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.FrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum output frequency.</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.Function;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.Function = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220OutputFunctionSinusoid" Value="Agilent33220OutputFunctionSinusoid"/>
                     <Enum Name="Agilent33220OutputFunctionSquare" Value="Agilent33220OutputFunctionSquare"/>
                     <Enum Name="Agilent33220OutputFunctionRamp" Value="Agilent33220OutputFunctionRamp"/>
                     <Enum Name="Agilent33220OutputFunctionPulse" Value="Agilent33220OutputFunctionPulse"/>
                     <Enum Name="Agilent33220OutputFunctionNoise" Value="Agilent33220OutputFunctionNoise"/>
                     <Enum Name="Agilent33220OutputFunctionDC" Value="Agilent33220OutputFunctionDC"/>
                     <Enum Name="Agilent33220OutputFunctionUser" Value="Agilent33220OutputFunctionUser"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220OutputFunctionSinusoid</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output waveform. The selected waveform is output using the previously selected frequency, amplitude, and offset voltage settings.</Description>
            </Property>
            <Property>
               <Name>Load</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.Load;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.Load = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The desired output termination (i.e., the impedance of the load attached to the output of the instrument). The specified value is used for amplitude, offset, and high/low level settings.</Description>
            </Property>
            <Property>
               <Name>LoadMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.LoadMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum output termination.</Description>
            </Property>
            <Property>
               <Name>LoadMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.LoadMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum output termination.</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.Polarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.Polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220OutputPolarityNormal" Value="Agilent33220OutputPolarityNormal"/>
                     <Enum Name="Agilent33220OutputPolarityInverted" Value="Agilent33220OutputPolarityInverted"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220OutputPolarityNormal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Invert the waveform relative to the offset voltage. In the normal mode (default), the waveform goes positive during the first part of the cycle. In the inverted mode, the waveform goes negative during the first part of the cycle.</Description>
            </Property>
            <Property>
               <Name>RampSymmetry</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.RampSymmetry;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.RampSymmetry = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The symmetry percentage for ramp waves. Symmetry represents the amount of time per cycle that the ramp wave is rising (assuming that the waveform polarity is not inverted).</Description>
            </Property>
            <Property>
               <Name>RampSymmetryMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.RampSymmetryMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum symmetry percentage for ramp waves.</Description>
            </Property>
            <Property>
               <Name>RampSymmetryMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.RampSymmetryMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum symmetry percentage for ramp waves.</Description>
            </Property>
            <Property>
               <Name>SquareDutyCycle</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.SquareDutyCycle;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.SquareDutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The duty cycle percentage for square waves. Duty cycle represents the amount of time per cycle that the square wave is at a high level (assuming that the waveform polarity is not inverted).</Description>
            </Property>
            <Property>
               <Name>SquareDutyCycleMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.SquareDutyCycleMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum duty cycle percentage for square waves.</Description>
            </Property>
            <Property>
               <Name>SquareDutyCycleMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.SquareDutyCycleMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum duty cycle percentage for square waves.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the front-panel Output connector.</Description>
            </Property>
            <Property>
               <Name>Sync</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	propertyValue = comobj.Sync;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj.Sync = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the front-panel Sync connector. At lower amplitudes, you can reduce output distortion by disabling the Sync signal.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetFrequencyMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the output frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetFrequencyMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the output frequency ot the minimum.</Description>
            </Method>
            <Method>
               <Name>SetLoadInfinity</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLoadInfinity(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetLoadInfinity();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the desired output termination to the infinity.</Description>
            </Method>
            <Method>
               <Name>SetLoadMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLoadMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetLoadMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the desired output termination to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetLoadMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLoadMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetLoadMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the desired output termination to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetRampSymmetryMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRampSymmetryMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetRampSymmetryMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the symmetry percentage for ramp waves to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetRampSymmetryMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetRampSymmetryMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetRampSymmetryMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the symmetry percentage for ramp waves to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetSquareDutyCycleMax</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSquareDutyCycleMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetSquareDutyCycleMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the duty cycle percentage for square waves to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetSquareDutyCycleMin</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSquareDutyCycleMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
feature('COM_SafeArraySingleDim',1);
comobj.SetSquareDutyCycleMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the duty cycle percentage for square waves to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>outputtrigger</Name>
         <Description>Agilent 33220 output trigger interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="OutputTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>outputtrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.OutputTrigger;
	propertyValue = comobj.Slope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.OutputTrigger;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220TriggerSlopePositive" Value="Agilent33220TriggerSlopePositive"/>
                     <Enum Name="Agilent33220TriggerSlopeNegative" Value="Agilent33220TriggerSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220TriggerSlopePositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select a rising or falling edge for the trigger out signal.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>outputtrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.OutputTrigger;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.OutputTrigger;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the trigger out signal (used with burst and sweep only).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>outputvoltage</Name>
         <Description>Agilent 33220 output voltage interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="OutputVoltage1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.Amplitude;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	comobj.Amplitude = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The output amplitude.</Description>
            </Property>
            <Property>
               <Name>AmplitudeMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.AmplitudeMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The output amplitude maximum.</Description>
            </Property>
            <Property>
               <Name>AmplitudeMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.AmplitudeMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The output amplitude minimum.</Description>
            </Property>
            <Property>
               <Name>High</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.High;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	comobj.High = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The high voltage level.</Description>
            </Property>
            <Property>
               <Name>HighMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.HighMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The high voltage level maximum.</Description>
            </Property>
            <Property>
               <Name>HighMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.HighMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The high voltage level minimum.</Description>
            </Property>
            <Property>
               <Name>Low</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.Low;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	comobj.Low = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The low voltage level.</Description>
            </Property>
            <Property>
               <Name>LowMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.LowMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The low voltage level maximum.</Description>
            </Property>
            <Property>
               <Name>LowMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.LowMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The low voltage level minimum.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.Offset;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The dc offset voltage. The default offset is 0 volts for all functions.</Description>
            </Property>
            <Property>
               <Name>OffsetMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.OffsetMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The dc offset voltage maximum.</Description>
            </Property>
            <Property>
               <Name>OffsetMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.OffsetMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The dc offset voltage minimum.</Description>
            </Property>
            <Property>
               <Name>RangeAuto</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.RangeAuto;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	comobj.RangeAuto = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220VoltageRangeAutoOff" Value="Agilent33220VoltageRangeAutoOff"/>
                     <Enum Name="Agilent33220VoltageRangeAutoOn" Value="Agilent33220VoltageRangeAutoOn"/>
                     <Enum Name="Agilent33220VoltageRangeAutoOnce" Value="Agilent33220VoltageRangeAutoOnce"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220VoltageRangeAutoOff</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable voltage autoranging for all functions.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	propertyValue = comobj.Units;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Output;
	comobj = comobj.Voltage;
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220OutputVoltageUnitVpp" Value="Agilent33220OutputVoltageUnitVpp"/>
                     <Enum Name="Agilent33220OutputVoltageUnitVrms" Value="Agilent33220OutputVoltageUnitVrms"/>
                     <Enum Name="Agilent33220OutputVoltageUnitDbm" Value="Agilent33220OutputVoltageUnitDbm"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220OutputVoltageUnitVpp</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Units for output amplitude (does not affect offset voltage or high/low levels).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetAmplitudeMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetAmplitudeMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetAmplitudeMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the output amplitude to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetAmplitudeMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetAmplitudeMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetAmplitudeMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the output amplitude to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetHighMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetHighMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetHighMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the high voltage level to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetHighMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetHighMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetHighMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the high voltage level to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetLowMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLowMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetLowMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the low voltage level to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetLowMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetLowMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetLowMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the low voltage level to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetOffsetMax</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetOffsetMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetOffsetMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the dc offset voltage to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetOffsetMin</Name>
               <Location>outputvoltage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetOffsetMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Output;
comobj = comobj.Voltage;
feature('COM_SafeArraySingleDim',1);
comobj.SetOffsetMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the dc offset voltage to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>phaselock</Name>
         <Description>Agilent 33220 phase lock interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PhaseLock1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Phase</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	propertyValue = comobj.Phase;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	comobj.Phase = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The phase offset of the output waveform.</Description>
            </Property>
            <Property>
               <Name>PhaseMax</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	propertyValue = comobj.PhaseMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum phase offset of the output waveform.</Description>
            </Property>
            <Property>
               <Name>PhaseMin</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	propertyValue = comobj.PhaseMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum phase offset of the output waveform.</Description>
            </Property>
            <Property>
               <Name>PhaseUnits</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	propertyValue = comobj.PhaseUnits;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	comobj.PhaseUnits = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220PhaseUnitDegree" Value="Agilent33220PhaseUnitDegree"/>
                     <Enum Name="Agilent33220PhaseUnitRadian" Value="Agilent33220PhaseUnitRadian"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220PhaseUnitDegree</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select degrees or radians to set the phase offset value.</Description>
            </Property>
            <Property>
               <Name>UnlockErrorState</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	propertyValue = comobj.UnlockErrorState;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PhaseLock;
	comobj.UnlockErrorState = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the function generator from generating an error if the phase-lock is ever lost.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Reference</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reference(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PhaseLock;
feature('COM_SafeArraySingleDim',1);
comobj.Reference();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Immediately set the zero-phase reference point without changing the output of the function generator.</Description>
            </Method>
            <Method>
               <Name>SetPhaseMax</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPhaseMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PhaseLock;
feature('COM_SafeArraySingleDim',1);
comobj.SetPhaseMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the phase offset of the output waveform to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetPhaseMin</Name>
               <Location>phaselock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPhaseMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PhaseLock;
feature('COM_SafeArraySingleDim',1);
comobj.SetPhaseMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the phase offset of the output waveform to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>pm</Name>
         <Description>Agilent 33220 PM interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Deviation</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.Deviation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	comobj.Deviation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The peak frequency deviation in hertz. This value represents the variation in frequency of the modulating waveform from the carrier frequency.</Description>
            </Property>
            <Property>
               <Name>DeviationMax</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.DeviationMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum peak frequency deviation.</Description>
            </Property>
            <Property>
               <Name>DeviationMin</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.DeviationMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum peak frequency deviation.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.InternalFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	comobj.InternalFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMax</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.InternalFrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMin</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.InternalFrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFunction</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.InternalFunction;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	comobj.InternalFunction = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220PMInternalFunctionSinusoid" Value="Agilent33220PMInternalFunctionSinusoid"/>
                     <Enum Name="Agilent33220PMInternalFunctionSquare" Value="Agilent33220PMInternalFunctionSquare"/>
                     <Enum Name="Agilent33220PMInternalFunctionRamp" Value="Agilent33220PMInternalFunctionRamp"/>
                     <Enum Name="Agilent33220PMInternalFunctionNegativeRamp" Value="Agilent33220PMInternalFunctionNegativeRamp"/>
                     <Enum Name="Agilent33220PMInternalFunctionTriangle" Value="Agilent33220PMInternalFunctionTriangle"/>
                     <Enum Name="Agilent33220PMInternalFunctionNoise" Value="Agilent33220PMInternalFunctionNoise"/>
                     <Enum Name="Agilent33220PMInternalFunctionUser" Value="Agilent33220PMInternalFunctionUser"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220PMInternalFunctionSinusoid</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The shape of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220PMSourceInternal" Value="Agilent33220PMSourceInternal"/>
                     <Enum Name="Agilent33220PMSourceExternal" Value="Agilent33220PMSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220PMSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The source of the modulating signal. The function generator will accept an internal or external modulation source.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PM;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable PM. To avoid multiple waveform changes, you can enable PM after you have set up the other modulation parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetDeviationMax</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the peak frequency deviation to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetDeviationMin</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the peak frequency deviation to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMax</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMin</Name>
               <Location>pm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>pulse</Name>
         <Description>Agilent 33220 pulse interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Pulse1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DutyCycle</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.DutyCycle;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	comobj.DutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Pulse duty cycle in percent. The pulse duty cycle is defined as : Duty Cycle = 100  X pulse Width / Period</Description>
            </Property>
            <Property>
               <Name>DutyCycleMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.DutyCycleMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum duty cycle</Description>
            </Property>
            <Property>
               <Name>DutyCycleMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.DutyCycleMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum duty cycle</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.Period;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	comobj.Period = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The period for pulses.</Description>
            </Property>
            <Property>
               <Name>PeriodMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.PeriodMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum period for pulses.</Description>
            </Property>
            <Property>
               <Name>PeriodMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.PeriodMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum period for pulses.</Description>
            </Property>
            <Property>
               <Name>Transition</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.Transition;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	comobj.Transition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The edge time in seconds for both the rising and falling edges. The edge time represents the time from the 10% threshold to the 90% threshold of each edge.</Description>
            </Property>
            <Property>
               <Name>TransitionMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.TransitionMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum edge time in seconds for both the rising and falling edges.</Description>
            </Property>
            <Property>
               <Name>TransitionMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.TransitionMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum edge time in seconds for both the rising and falling edges.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.Width;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The pulse width in seconds. The pulse width represents the time from the 50% threshold of the rising edge of the pulse to the 50% threshold of the next falling edge.</Description>
            </Property>
            <Property>
               <Name>WidthMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.WidthMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum pulse width in seconds.</Description>
            </Property>
            <Property>
               <Name>WidthMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Pulse;
	propertyValue = comobj.WidthMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum pulse width in seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetDutyCycleMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDutyCycleMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetDutyCycleMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the maximum duty cycle</Description>
            </Method>
            <Method>
               <Name>SetDutyCycleMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDutyCycleMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetDutyCycleMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the minimum duty cycle</Description>
            </Method>
            <Method>
               <Name>SetPeriodMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPeriodMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetPeriodMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the period for pulses to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetPeriodMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetPeriodMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetPeriodMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the period for pulses to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetTransitionMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTransitionMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetTransitionMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the edge time in seconds for both the rising and falling edges to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetTransitionMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTransitionMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetTransitionMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the edge time in seconds for both the rising and falling edges to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetWidthMax</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetWidthMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetWidthMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the pulse width in seconds to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetWidthMin</Name>
               <Location>pulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetWidthMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Pulse;
feature('COM_SafeArraySingleDim',1);
comobj.SetWidthMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the pulse width in seconds to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>pwm</Name>
         <Description>Agilent 33220 PWM interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PWM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Deviation</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.Deviation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	comobj.Deviation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The peak frequency deviation in hertz. This value represents the variation in frequency of the modulating waveform from the carrier frequency.</Description>
            </Property>
            <Property>
               <Name>DeviationDutyCycle</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.DeviationDutyCycle;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	comobj.DeviationDutyCycle = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the duty cycle deviation in percent (percent of period). This value represents the peak variation in duty cycle from the duty cycle of the underlying pulse waveform. </Description>
            </Property>
            <Property>
               <Name>DeviationDutyCycleMax</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.DeviationDutyCycleMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum peak variation in duty cycle.</Description>
            </Property>
            <Property>
               <Name>DeviationDutyCycleMin</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.DeviationDutyCycleMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum peak variation in duty cycle.</Description>
            </Property>
            <Property>
               <Name>DeviationMax</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.DeviationMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum peak frequency deviation.</Description>
            </Property>
            <Property>
               <Name>DeviationMin</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.DeviationMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum peak frequency deviation.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.InternalFrequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	comobj.InternalFrequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMax</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.InternalFrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFrequencyMin</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.InternalFrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum frequency of the modulating waveform.</Description>
            </Property>
            <Property>
               <Name>InternalFunction</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.InternalFunction;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	comobj.InternalFunction = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220PWMInternalFunctionSinusoid" Value="Agilent33220PWMInternalFunctionSinusoid"/>
                     <Enum Name="Agilent33220PWMInternalFunctionSquare" Value="Agilent33220PWMInternalFunctionSquare"/>
                     <Enum Name="Agilent33220PWMInternalFunctionRamp" Value="Agilent33220PWMInternalFunctionRamp"/>
                     <Enum Name="Agilent33220PWMInternalFunctionNegativeRamp" Value="Agilent33220PWMInternalFunctionNegativeRamp"/>
                     <Enum Name="Agilent33220PWMInternalFunctionTriangle" Value="Agilent33220PWMInternalFunctionTriangle"/>
                     <Enum Name="Agilent33220PWMInternalFunctionNoise" Value="Agilent33220PWMInternalFunctionNoise"/>
                     <Enum Name="Agilent33220PWMInternalFunctionUser" Value="Agilent33220PWMInternalFunctionUser"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220PWMInternalFunctionSinusoid</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The shape of the modulating waveform. Used only when the Internal modulation source is selected.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220PWMSourceInternal" Value="Agilent33220PWMSourceInternal"/>
                     <Enum Name="Agilent33220PWMSourceExternal" Value="Agilent33220PWMSourceExternal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220PWMSourceInternal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The source of the modulating signal. The function generator will accept an internal or external modulation source.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.PWM;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable PM. To avoid multiple waveform changes, you can enable PM after you have set up the other modulation parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetDeviationDutyCycleMax</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationDutyCycleMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PWM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationDutyCycleMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the maximum peak variation in duty cycle.</Description>
            </Method>
            <Method>
               <Name>SetDeviationDutyCycleMin</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationDutyCycleMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PWM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationDutyCycleMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the minimum peak variation in duty cycle.</Description>
            </Method>
            <Method>
               <Name>SetDeviationMax</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PWM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the peak frequency deviation to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetDeviationMin</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetDeviationMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PWM;
feature('COM_SafeArraySingleDim',1);
comobj.SetDeviationMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the peak frequency deviation to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMax</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PWM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetInternalFrequencyMin</Name>
               <Location>pwm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetInternalFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.PWM;
feature('COM_SafeArraySingleDim',1);
comobj.SetInternalFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency of the modulating waveform to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>statestorage</Name>
         <Description>Agilent 33220 state storage interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="StateStorage1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AutoRecall</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.StateStorage;
	propertyValue = comobj.AutoRecall;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.StateStorage;
	comobj.AutoRecall = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the automatic recall of the power-down state from storage location 0 when power is turned on.</Description>
            </Property>
            <Property>
               <Name>NumberOfStates</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.StateStorage;
	propertyValue = comobj.NumberOfStates;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the total number of memory locations available for state storage. Always returns 5 (memory location 0 is included).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Delete</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Delete(obj, State)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.StateStorage;
feature('COM_SafeArraySingleDim',1);
comobj.Delete(int32(State));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Delete the contents of the specified storage location.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = Name(obj, State, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.StateStorage;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(State), varargin{:});
end
[pVal] = comobj.Name(int32(State));
</MCode>
               </Code>
               <Description>Assign a custom name to the specified storage location.</Description>
            </Method>
            <Method>
               <Name>Recall</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Recall(obj, State)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.StateStorage;
feature('COM_SafeArraySingleDim',1);
comobj.Recall(int32(State));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Recall the instrument state stored in the specified non-volatile storage location. You cannot recall the instrument state from a storage location that is empty.</Description>
            </Method>
            <Method>
               <Name>Save</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Save(obj, State)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.StateStorage;
feature('COM_SafeArraySingleDim',1);
comobj.Save(int32(State));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Store (save) the current instrument state in the specified non-volatile storage location. Any state previously stored in the same location will be overwritten (and no error will be generated).</Description>
            </Method>
            <Method>
               <Name>Valid</Name>
               <Location>statestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = Valid(obj, State, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.StateStorage;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Valid(int32(State), varargin{:});
end
[pVal] = comobj.Valid(int32(State));
</MCode>
               </Code>
               <Description>Query the specified storage location to determine if a valid state is currently stored in that location.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>sweep</Name>
         <Description>Agilent 33220 sweep interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Sweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Spacing</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.Spacing;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj.Spacing = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220SweepSpacingLinear" Value="Agilent33220SweepSpacingLinear"/>
                     <Enum Name="Agilent33220SweepSpacingLogarithmic" Value="Agilent33220SweepSpacingLogarithmic"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220SweepSpacingLinear</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The spacing for the sweep (linear or logarithmic). The default is Linear.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the sweep mode. To avoid multiple waveform changes, you can enable the sweep mode after you have set up the other sweep parameters.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.Time;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of seconds required to sweep from the start frequency.</Description>
            </Property>
            <Property>
               <Name>TimeMax</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.TimeMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum number of seconds required to sweep from the start frequency.</Description>
            </Property>
            <Property>
               <Name>TimeMin</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	propertyValue = comobj.TimeMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum number of seconds required to sweep from the start frequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetTimeMax</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTimeMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
feature('COM_SafeArraySingleDim',1);
comobj.SetTimeMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the number of seconds required to sweep from the start frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetTimeMin</Name>
               <Location>sweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetTimeMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
feature('COM_SafeArraySingleDim',1);
comobj.SetTimeMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the number of seconds required to sweep from the start frequency to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>sweepfrequency</Name>
         <Description>Agilent 33220 sweep frequency interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepFrequency1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Center</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.Center;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	comobj.Center = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The center frequency (used in conjunction with the frequency span).</Description>
            </Property>
            <Property>
               <Name>CenterMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.CenterMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum center frequency.</Description>
            </Property>
            <Property>
               <Name>CenterMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.CenterMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum center frequency.</Description>
            </Property>
            <Property>
               <Name>Span</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.Span;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	comobj.Span = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency span (used in conjunction with the center frequency).</Description>
            </Property>
            <Property>
               <Name>SpanMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.SpanMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum frequency span.</Description>
            </Property>
            <Property>
               <Name>SpanMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.SpanMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum frequency span.</Description>
            </Property>
            <Property>
               <Name>Start</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.Start;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	comobj.Start = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The start frequency (used in conjunction with the stop frequency).</Description>
            </Property>
            <Property>
               <Name>StartMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.StartMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum start frequency.</Description>
            </Property>
            <Property>
               <Name>StartMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.StartMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum start frequency.</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.Stop;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	comobj.Stop = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The stop frequency (used in conjunction with the start frequency).</Description>
            </Property>
            <Property>
               <Name>StopMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.StopMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum stop frequency.</Description>
            </Property>
            <Property>
               <Name>StopMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Frequency;
	propertyValue = comobj.StopMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum stop frequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetCenterMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetCenterMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetCenterMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the center frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetCenterMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetCenterMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetCenterMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the center frequency to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetSpanMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSpanMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetSpanMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency span to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetSpanMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetSpanMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetSpanMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the frequency span to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetStartMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetStartMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetStartMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the start frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetStartMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetStartMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetStartMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the start frequency to the minimum.</Description>
            </Method>
            <Method>
               <Name>SetStopMax</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetStopMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetStopMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the stop frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetStopMin</Name>
               <Location>sweepfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetStopMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Frequency;
feature('COM_SafeArraySingleDim',1);
comobj.SetStopMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the stop frequency to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>sweepmarker</Name>
         <Description>Agilent 33220 sweep marker interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SweepMarker1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Frequency</Name>
               <Location>sweepmarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Marker;
	propertyValue = comobj.Frequency;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Marker;
	comobj.Frequency = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The marker frequency. This is the frequency at which the signal on the front-panel Sync connector goes to a logic low during the sweep.</Description>
            </Property>
            <Property>
               <Name>FrequencyMax</Name>
               <Location>sweepmarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Marker;
	propertyValue = comobj.FrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum marker frequency.</Description>
            </Property>
            <Property>
               <Name>FrequencyMin</Name>
               <Location>sweepmarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Marker;
	propertyValue = comobj.FrequencyMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum marker frequency.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>sweepmarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Marker;
	propertyValue = comobj.State;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Sweep;
	comobj = comobj.Marker;
	comobj.State = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the frequency marker. When the frequency marker is disabled, the signal output from the Sync connector is the normal Sync signal for the carrier waveform.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SetFrequencyMax</Name>
               <Location>sweepmarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetFrequencyMax(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Marker;
feature('COM_SafeArraySingleDim',1);
comobj.SetFrequencyMax();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the marker frequency to the maximum.</Description>
            </Method>
            <Method>
               <Name>SetFrequencyMin</Name>
               <Location>sweepmarker</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetFrequencyMin(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Sweep;
comobj = comobj.Marker;
feature('COM_SafeArraySingleDim',1);
comobj.SetFrequencyMin();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the marker frequency to the minimum.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>system</Name>
         <Description>Agilent 33220 system interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AsyncEventsEnabled</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.AsyncEventsEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.AsyncEventsEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable asynchronous events to event server.</Description>
            </Property>
            <Property>
               <Name>BeeperState</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.BeeperState;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.BeeperState = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the tone heard when an error is generated from the front-panel or over the remote interface. The current selection is stored in non-volatile memory.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.SerialNumber;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>I/O timeout value in milliseconds.</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TraceEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Driver tracing enabled.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Beeper</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Beeper(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.Beeper();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Issue a single beep immediately.</Description>
            </Method>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Front panel disable.</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Front panel enable.</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.GetState(uint8([0;0]));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Binary current instrument state.  May be restored using PutState method.  Data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(uint8(Data));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Internal memory instrument state.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, Identifier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(Identifier);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Internal memory instrument state.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, Identifier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(Identifier);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Internal memory instrument state.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Method returns when all pending operations are complete or MaxTimeMilliseconds exceeded.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>systemio</Name>
         <Description>IEEE 488.2 Formatted I/O Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SystemIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InstrumentBigEndian</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	propertyValue = comobj.InstrumentBigEndian;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj.InstrumentBigEndian = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether the instrument communicates in Big Endian (IEEE 488.2) format</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FlushRead</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushRead(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushRead();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Read Buffer</Description>
            </Method>
            <Method>
               <Name>FlushWrite</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushWrite(obj, sendEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushWrite(logical(sendEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Write Buffer and optionally send the END signal</Description>
            </Method>
            <Method>
               <Name>ReadIEEEBlock</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadIEEEBlock(obj, type, seekToBlock, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadIEEEBlock(type, logical(seekToBlock), logical(flushToEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a definite-length IEEE block from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadList</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadList(obj, type, listSeperator)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadList(type, listSeperator);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a list of values in ASCII format from the I/O Stream, convert them to the specified type, and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadNumber</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadNumber(obj, type, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadNumber(type, logical(flushToEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a single number from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the entire contents of the buffer until the termination character / END signal and return the data as a string</Description>
            </Method>
            <Method>
               <Name>SetBufferSize</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetBufferSize(obj, mask, size)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.SetBufferSize(mask, int32(size));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the formatted I/O read or write buffer size</Description>
            </Method>
            <Method>
               <Name>WriteIEEEBlock</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteIEEEBlock(obj, Command, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteIEEEBlock(Command, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a command followed by an IEEE 488.2 definite-length binary block terminated with the Stream's termination character to the I/O Stream</Description>
            </Method>
            <Method>
               <Name>WriteList</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteList(obj, data, type, listSeperator, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteList(type, listSeperator, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a list of values to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteNumber</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteNumber(obj, data, type, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteNumber(type, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a single number to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>systemio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(data, logical(flushAndEND));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the I/O Stream and optionally flush the buffer</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>systemioio</Name>
         <Description>Message Based Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SystemIOIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ComponentVersion</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.ComponentVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Get the implementation version of the component</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceName</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get a description of the hardware interface</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceNumber</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceNumber;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Get the hardware interface number</Description>
            </Property>
            <Property>
               <Name>HardwareInterfaceType</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.HardwareInterfaceType;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Get the hardware interface type</Description>
            </Property>
            <Property>
               <Name>IOProtocol</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.IOProtocol;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.IOProtocol = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="PROT_NORMAL" Value="PROT_NORMAL"/>
                     <Enum Name="PROT_FDC" Value="PROT_FDC"/>
                     <Enum Name="PROT_HS488" Value="PROT_HS488"/>
                     <Enum Name="PROT_4882_STRS" Value="PROT_4882_STRS"/>
                     <Enum Name="PROT_USBTMC_VENDOR" Value="PROT_USBTMC_VENDOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>PROT_NORMAL</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set which I/O protocol to use</Description>
            </Property>
            <Property>
               <Name>LastStatus</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand/>
                  </Commands>
               </Code>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LockState</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.LockState;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NO_LOCK" Value="NO_LOCK"/>
                     <Enum Name="EXCLUSIVE_LOCK" Value="EXCLUSIVE_LOCK"/>
                     <Enum Name="SHARED_LOCK" Value="SHARED_LOCK"/>
                     <Enum Name="LOAD_CONFIG" Value="LOAD_CONFIG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>NO_LOCK</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Get the current lock state of the resource</Description>
            </Property>
            <Property>
               <Name>OptionString</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.OptionString;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the current state of all settable properties</Description>
            </Property>
            <Property>
               <Name>ProgID</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.ProgID;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the ProgID of the component</Description>
            </Property>
            <Property>
               <Name>ResourceName</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.ResourceName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the resource name</Description>
            </Property>
            <Property>
               <Name>SendEndEnabled</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SendEndEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.SendEndEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to assert END on Write</Description>
            </Property>
            <Property>
               <Name>SessionType</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SessionType;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the session class type</Description>
            </Property>
            <Property>
               <Name>SoftwareManufacturerID</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SoftwareManufacturerID;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Get the manufacturer ID of the component</Description>
            </Property>
            <Property>
               <Name>SoftwareManufacturerName</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SoftwareManufacturerName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Get the manufacturer name of the component</Description>
            </Property>
            <Property>
               <Name>SpecVersion</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SpecVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Get the VISA COM I/O specification version</Description>
            </Property>
            <Property>
               <Name>TerminationCharacter</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacter;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.TerminationCharacter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the termination character</Description>
            </Property>
            <Property>
               <Name>TerminationCharacterEnabled</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacterEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.TerminationCharacterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to use the termination character on Read</Description>
            </Property>
            <Property>
               <Name>Timeout</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.Timeout;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.Timeout = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the I/O timeout in milliseconds</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AssertTrigger</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AssertTrigger(obj, protocol)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.AssertTrigger(protocol);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Assert a trigger</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear the device</Description>
            </Method>
            <Method>
               <Name>Close</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Close the session</Description>
            </Method>
            <Method>
               <Name>Init</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Init(obj, ResourceName, mode, initTimeout, OptionString)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Init(ResourceName, mode, int32(initTimeout), OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initialize a session to the specified resource name</Description>
            </Method>
            <Method>
               <Name>LockRsrc</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pAccessKey] = LockRsrc(obj, type, lockTimeout, requestedKey)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pAccessKey] = comobj.LockRsrc(type, int32(lockTimeout), requestedKey);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Establish ownership of the resource</Description>
            </Method>
            <Method>
               <Name>Read</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = Read(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.Read(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes</Description>
            </Method>
            <Method>
               <Name>ReadSTB</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pStatusByte] = ReadSTB(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pStatusByte] = comobj.ReadSTB();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the status byte</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = ReadString(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.ReadString(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes as a string</Description>
            </Method>
            <Method>
               <Name>UnlockRsrc</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockRsrc(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockRsrc();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Relinquish ownership of the resource</Description>
            </Method>
            <Method>
               <Name>Write</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = Write(obj, buffer, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.Write(uint8(buffer), int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified data</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>systemioio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = WriteString(obj, buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.WriteString(buffer);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified string</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description>Agilent 33220 trigger interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Slope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220TriggerSlopePositive" Value="Agilent33220TriggerSlopePositive"/>
                     <Enum Name="Agilent33220TriggerSlopeNegative" Value="Agilent33220TriggerSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220TriggerSlopePositive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select whether the function generator uses the rising edge or falling edge of the trigger signal.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent33220TriggerSourceImmediate" Value="Agilent33220TriggerSourceImmediate"/>
                     <Enum Name="Agilent33220TriggerSourceExternal" Value="Agilent33220TriggerSourceExternal"/>
                     <Enum Name="Agilent33220TriggerSourceBus" Value="Agilent33220TriggerSourceBus"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Agilent33220TriggerSourceImmediate</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The source from which the function generator will accept a trigger.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>SoftwareTrigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SoftwareTrigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
feature('COM_SafeArraySingleDim',1);
comobj.SoftwareTrigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Trigger a sweep or burst from the remote interface only if the bus (software) trigger source is currently selected.</Description>
            </Method>
            <Method>
               <Name>Trigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Trigger(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
feature('COM_SafeArraySingleDim',1);
comobj.Trigger();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Trigger a sweep or burst from the remote interface. This command can be used with any of the available trigger sources.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>utility</Name>
         <Description>IVI Driver utility interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Disable</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Disable(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Disable();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>ErrorQuery</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = ErrorQuery(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[ErrorCode, ErrorMessage] = comobj.ErrorQuery(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>LockObject</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.LockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>ResetWithDefaults</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetWithDefaults(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.ResetWithDefaults();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>SelfTest</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = SelfTest(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[TestResult, TestMessage] = comobj.SelfTest(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>UnlockObject</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Releases a previously obtained mutlithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>